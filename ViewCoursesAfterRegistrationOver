#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <iomanip>
using namespace std;
struct date
{
	int day;
	int month;
	int year;
};

struct student
{
	int no;
	long int id;
	string firstname;
	string lastname;
	string password;
	string sclass;
	string gender;
	const int type = 0;
	int socialid;
	student* next;
	date dob;
};

struct Course {
	int no;
	string CoId, CoName, teacherName;
	int credit, maxSt = 50;
	string day[2], s[2];
	Course* next;
	StuofCourse* SofC = nullptr;
};

struct Sem {
	int year;
	string SemStart;
	string SemEnd;
	string regisStart;
	string regisEnd;
	Course* head = nullptr;
	Course* cur = nullptr;
	Course s;
};

struct StuofCourse
{
	int StuEnroll;//num of Students enrolling to course right now;
	student Stu;
	StuofCourse* next;
};

void InputMyCourse(fstream& f, Course* MyCo, int& n, student Student)
{
	string filename;
	filename = to_string(Student.id) + "_Courses.txt";
	f.open(filename, fstream::in);
	f >> n;
	Course* pcur = MyCo;
	if (f.fail())
	{
		cout << "Can't open Student's Courses file.\n";
		return;
	}
	while (!f.eof())
	{
		if (MyCo == nullptr)
		{
			MyCo = new Course;
			pcur = MyCo;
		}
		else
		{
			pcur->next = new Course;
			pcur = pcur->next;
		}
		f >> pcur->no;
		f >> pcur->CoId;
		f >> pcur->CoName;
		f >> pcur->teacherName;
		f >> pcur->credit;
		f >> pcur->maxSt;
		f >> pcur->day[0];
		f >> pcur->s[0];
		f >> pcur->day[1];
		f >> pcur->s[1];
		pcur->next = nullptr;
	}
	f.close();
}

void ViewMyCourseAfterRegistrationOver(Sem S, int y)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << S.year + 1 << " in the year of " << y << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "Credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	if (S.head == nullptr) return;
	Course* pC = S.head;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoId;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->teacherName;
		cout << setw(5) << pC->credit;
		cout << setw(5) << pC->maxSt;
		cout << setw(15) << pC->day[0];
		cout << setw(15) << pC->s[0];
		cout << endl << setw(89) << pC->day[1];
		cout << endl << setw(15) << pC->s[1];
		pC = pC->next;
	}
}
