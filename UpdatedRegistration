#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <iomanip>
using namespace std;

struct StuInfo
{
	int No;
	int StuID;
	char* FirstName;
	char* LastName;
	char Gender;
	int day, month, year;
	long long int SocialID;
};

struct Course {
	int CoID;
	int stt;
	string CoName;
	string TeacherName;
	int Credit;
	int NumofStu = 50;

	string* Dayofweek;
	string* Session;
	Course* nxt;
	StuofCourse *SofC;
};

struct Sem {
	int sem;
	string SemStart;
	string SemEnd;
	string regisStart;
	string regisEnd;
	Course* C;
};

struct StuofCourse
{
	int StuEnroll;//num of Students enrolling to course right now;
	StuInfo Stu;
	StuofCourse* nxt;
};

void InputMyCourse(fstream& f, Course* MyCo, int &n, StuInfo Student)
{
	string filename;
	filename = to_string(Student.StuID) + ".txt";
	f.open(filename, fstream::in);
	int count = n;
	Course* pcur = MyCo;
	if (f.fail())
	{
		cout << "Can't open Student's Courses file.\n";
		return;
	}
	while (count <= 0)
	{
		if (MyCo == nullptr)
		{
			MyCo = new Course;
			pcur = MyCo;
		}
		else
		{
			pcur->nxt = new Course;
			pcur = pcur->nxt;
		}
		pcur->Dayofweek = new string[2];
		pcur->Session = new string[2];
		f >> pcur->stt;
		f >> pcur->CoID;
		f >> pcur->CoName;
		f >> pcur->TeacherName;
		f >> pcur->Credit;
		f >> pcur->NumofStu;
		f >> pcur->Dayofweek[0];
		f >> pcur->Session[0];
		f >> pcur->Dayofweek[1];
		f >> pcur->Session[1];
		pcur->nxt = nullptr;
		count--;
	}
	f.close();
}

void InputAvailCourse(fstream& f,fstream& fSoC, Sem& S, int& y, Course* MyCo)
{
	string filename;

	y = 1;
	int t;
	Course* pcur = nullptr;
	f >> y;
	f >> S.sem;
	f >> S.regisStart;
	f >> S.regisEnd;
	f >> S.SemStart;
	f >> S.SemEnd;
	f >> t;
	while (t != 0)
	{
		if (S.C == nullptr)
		{
			S.C = new Course;
			pcur = S.C;
		}
		else
		{
			pcur->nxt = new Course;
			pcur = pcur->nxt;
		}
		pcur->Dayofweek = new string[2];
		pcur->Session = new string[2];
		pcur->stt = t;	
		f >> pcur->CoID;
		f >> pcur->CoName;
		f >> pcur->TeacherName;
		f >> pcur->Credit;
		f >> pcur->NumofStu;
		f >> pcur->Dayofweek[0];
		f >> pcur->Session[0];
		f >> pcur->Dayofweek[1];
		f >> pcur->Session[1];
		
		filename = to_string(pcur->CoID) + ".txt";
		fSoC.open(filename, fstream::in);
		pcur->SofC = nullptr;
		f >>  pcur->SofC->StuEnroll;
		StuofCourse *ptmp ;
		while (!fSoC.eof())
		{
			if (pcur->SofC == nullptr)
			{
				pcur->SofC = new StuofCourse;
				ptmp = pcur->SofC;
			}
			else
			{
				ptmp->nxt = new StuofCourse;
				ptmp = ptmp->nxt;
			}
			fSoC >> ptmp->Stu.No;
			fSoC >> ptmp->Stu.StuID;
			fSoC >> ptmp->Stu.FirstName;
			fSoC >> ptmp->Stu.LastName;
			fSoC >> ptmp->Stu.Gender;
			fSoC >> ptmp->Stu.day;
			fSoC >> ptmp->Stu.month;
			fSoC >> ptmp->Stu.year;
			fSoC >> ptmp->Stu.SocialID;
			ptmp->nxt=nullptr;
		}
		pcur->nxt = nullptr;
		f >> t;
		fSoC.close();
	}
	while (MyCo->nxt != nullptr)
	{
		RemoveAlreadyCourses(S.C, MyCo->stt);
		MyCo = MyCo->nxt;
	}
}

void EnrollCourse(Sem S, Course*& MyCourse, int& count,StuInfo Student) // S la hoc ki voi cac course dc staff nhap vao
{
	if (count == 5)
	{
		cout << "You have met the limit of ernrollment course!!!" << endl;
		return;
	}
	int ID;
	bool check;
	if (S.C == nullptr)	return;
	cout << endl << "Please input the Course ID you want to enroll." << endl;
	cout << "ID: ";
	cin >> ID;
	Course* pC = S.C;
	while (pC != nullptr && pC->CoID != ID) pC = pC->nxt;
	if (MyCourse != nullptr)
	{
		Course* pCheck = MyCourse;
		while (pCheck != nullptr)
		{
			for (int i = 0; i < 2; i++)
				for (int j = 0; j < 2; j++)
					if (pC->Dayofweek[i] == pCheck->Dayofweek[j])
						if (pC->Session[i] == pCheck->Session[j])
						{
							check = false;
							cout << " Enrollment fails. Session is conficted!" << endl;
							return;
						}
		}
	}
	if (pC == nullptr)
	{
		cout << "Wrong ID  !!!";
		return;
	}
	Course* pcur = MyCourse;
	if (MyCourse == nullptr)
	{
		MyCourse = pC;
	}
	else
	{
		while (pcur->nxt != nullptr) pcur = pcur->nxt;
		pcur->nxt = pC;
	}
	if (pC == S.C)
	{
		S.C = S.C->nxt;
	}
	else
	{
		Course* pLink = S.C;
		while (pLink->nxt != pC) pLink = pLink->nxt;
		pLink->nxt = pC->nxt;
	}
	pC->nxt = nullptr;
	AddStutoCourse(pC,Student);
	count++;
}

void AddStutoCourse(Course* MyCo, StuInfo Student)
{
	StuofCourse* pCur = MyCo->SofC;
	while (pCur->nxt != nullptr)	pCur = pCur->nxt;
	pCur->nxt = new StuofCourse;
	pCur = pCur->nxt;
	pCur->StuEnroll++;
	pCur->Stu.StuID = Student.StuID;
	pCur->Stu.day = Student.day;
	pCur->Stu.FirstName = Student.FirstName;
	pCur->Stu.LastName= Student.LastName;
	pCur->Stu.Gender = Student.Gender;
	pCur->Stu.month = Student.month;
	pCur->Stu.year = Student.year;
	pCur->Stu.SocialID = Student.SocialID;
	pCur->Stu.No = Student.No;
}

void ViewAvailableCourse(Sem S, int y)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << S.sem + 1 << " in the year of " << y << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << "Registion time is from " << S.regisStart << " to " << S.regisEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "Credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	Course* pC = S.C;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoID;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->TeacherName;
		cout << setw(5) << pC->Credit;
		cout << setw(5) << pC->NumofStu;
		cout << setw(15) << pC->Dayofweek[0];
		cout << setw(15) << pC->Session[0];
		cout << endl << setw(89) << pC->Dayofweek[1];
		cout << endl << setw(15) << pC->Session[1];
		pC = pC->nxt;
	}
}

void RemoveAlreadyCourses(Course*& pHead, int k)
{
	if (pHead == nullptr) return;
	Course* pCur = pHead;
	if (pHead->stt == k) {
		pHead = pHead->nxt;
		delete pCur;
		return;
	}
	while (pCur->nxt != nullptr) {
		if (pCur->nxt->stt == k) {
			Course* temp = pCur->nxt;
			pCur->nxt = pCur->nxt->nxt;
			delete temp;
			return;
		}
		pCur = pCur->nxt;
	}
}

void ViewMyCourse(Sem S, int y, Course* MyCo)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << S.sem + 1 << " in the year of " << y << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << "Registion time is from " << S.regisStart << " to " << S.regisEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "Credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	if (MyCo == nullptr) return;
	Course* pC = MyCo;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoID;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->TeacherName;
		cout << setw(5) << pC->Credit;
		cout << setw(5) << pC->NumofStu;
		cout << setw(15) << pC->Dayofweek[0];
		cout << setw(15) << pC->Session[0];
		cout << endl << setw(89) << pC->Dayofweek[1];
		cout << endl << setw(15) << pC->Session[1];
		pC = pC->nxt;
	}
}

void DeleteCourse(Sem& S, Course*& MyCo, int& count,StuInfo Student)
{
	if (MyCo == nullptr)
	{
		cout << "There are no courses available to delete!!! \n";
		return;
	}
	Course* pC = S.C;
	if (S.C != nullptr) while (pC->nxt != nullptr) pC = pC->nxt;
	int ID;
	cout << "Input the Course ID that you want to delete. \n";
	cout << "ID: ";
	cin >> ID;
	Course* pCur = MyCo;
	while (pCur != nullptr && pCur->CoID != ID) pCur = pCur->nxt;
	RemoveStuofCo(pCur, Student);
	if (S.C == nullptr)
	{
		S.C = pCur;
	}
	else
	{
		Course* pC = S.C;
		while (pC->nxt != nullptr) pC = pC->nxt;
		pC->nxt = pCur;
	}

	if (pCur == MyCo)
	{
		MyCo = MyCo->nxt;
	}
	else
	{
		Course* pLink = MyCo;
		while (pLink->nxt != pCur) pLink = pLink->nxt;
		pLink->nxt = pC->nxt;
	}
	pCur->nxt = nullptr;
	count--;
}

void RemoveStuofCo(Course*& MyCo,StuInfo Student)
{
	int x = Student.StuID;
	StuofCourse* pCur = MyCo->SofC;
	
	if (MyCo->SofC->Stu.StuID == x) {
		MyCo->SofC = MyCo->SofC->nxt;
		delete pCur;
		return;
	}

	while (pCur->nxt != nullptr) {
		if (pCur->nxt->Stu.StuID == x) {
			StuofCourse* temp = pCur->nxt;
			pCur->nxt = pCur->nxt->nxt;
			delete temp;
			return;
		}
		pCur = pCur->nxt;
	}
	MyCo->SofC->StuEnroll--;
}

void OperateTask(Sem& S, Course*& MyCourse, int& y,int count,StuInfo Student)
{
	int option = 1;
	while (option != 4)
	{
		cout << "\n\n";
		cout << "Course: " << endl;
		cout << "\t1. Enroll course.\n";
		cout << "\t2. Delete course.\n";
		cout << "\t3. View list of enrolled courses.\n";
		cout << "\t4. Do nothing. Stop.\n";
		cout << "What do you want to do (1-4 only): ";
		cin >> option;
		if (option != 1 && option != 2 && option != 3 && option != 4) continue;
		switch (option)
		{
		case 1:
		{
			ViewAvailableCourse(S, y);
			EnrollCourse(S, MyCourse,count,Student);
			break;
		}
		case 2:
		{
			ViewMyCourse(S, y, MyCourse);
			DeleteCourse(S, MyCourse,count,Student);
			break;
		}
		case 3:
		{
			ViewMyCourse(S, y, MyCourse);
			break;
		}
		case 4: 
			break;
		}
	}

}

void DeleteList(Course*& MyCo, Sem& S)
{
	while (MyCo != nullptr)
	{
		Course* pTmp = MyCo;
		MyCo = MyCo->nxt;
		delete pTmp;
	}
	while (S.C != nullptr)
	{
		Course* pTmp = S.C;
		S.C = S.C->nxt;
		delete pTmp;
	}
}

void StoreCoursesofStu(Course* MyCourse, fstream& f, int count, StuInfo Student)
{
	string filename;
	filename = to_string(Student.StuID) + ".txt";
	f.open(filename, fstream::out);
	if (f.fail())
	{
		cout << "Can't open the Student's Courses file.\n";
		return;
	}
	f << count;
	while (count != 0)
	{
		f << MyCourse->stt<<endl;
		f << MyCourse->CoID << endl;
		f << MyCourse->CoName << endl;
		f << MyCourse->TeacherName << endl;
		f << MyCourse->Credit << endl;
		f << MyCourse->NumofStu << endl;
		f << MyCourse->Dayofweek[0] << endl;
		f << MyCourse->Session[0] << endl;
		f << MyCourse->Dayofweek[1] << endl;
		f << MyCourse->Session[1] << endl;
		MyCourse = MyCourse->nxt;
		count--;
	}
	f.close();
}

void StoreStusofCourse(Course* MyCourse, fstream& f, StuInfo Student)
{
	string filename;
	filename = to_string(MyCourse->CoID) + ".txt";
	f.open(filename, fstream::out);
	if (f.fail())
	{
		cout << "Can't open the Student's Courses file.\n";
		return;
	}
	f << MyCourse->SofC->StuEnroll;
	int count = MyCourse->SofC->StuEnroll;
	StuofCourse* pCur = MyCourse->SofC;
	while (count != 0)
	{
		f << pCur->Stu.StuID << " ";
		f << pCur->Stu.FirstName <<" ";
		f << pCur->Stu.LastName << " ";
		f << pCur->Stu.Gender << " ";
		f << pCur->Stu.day << " ";
		f << pCur->Stu.month << " ";
		f << pCur->Stu.year << " ";
		f << pCur->Stu.SocialID << " ";
		count--;
		f << endl;
		pCur = pCur->nxt;
	}
	f.close();
}

int main()
{
	StuInfo Student;
	int count = 0;
	Sem Avail;
	Course* MyCo;
	fstream fin, fstu, fSoC;
	fin.open("AvailCourse.txt", fstream::in);
	int y;
	if (fin.fail())
	{
		cout << "Can't open the file !!!";
		return 0;
	}
	else
	{
		InputMyCourse(fstu, MyCo, count, Student);
		InputAvailCourse(fin, fSoC, Avail, y, MyCo);
		OperateTask(Avail, MyCo, y, count, Student);
		StoreCoursesofStu(MyCo, fstu, count, Student);
		StoreStusofCourse(MyCo, fSoC, Student);
		fin.close();
	}
	DeleteList(MyCo, Avail);

	return 0;
}
