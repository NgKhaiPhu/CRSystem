#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <iomanip>
using namespace std;

struct date
{
	int day;
	int month;
	int year;
};

struct student
{
	int no;
	long int id;
	string firstname;
	string lastname ;
	string password;
	string sclass;
	string gender;
	const int type = 0;
	int socialid;
	student* next;
	date dob;
};

struct Course {
	int no;
	string CoId, CoName, teacherName;
	int credit, maxSt = 50;
	string day[2], s[2];
	Course* next;
	StuofCourse *SofC=nullptr;
};

struct Sem {
	int year;
	string SemStart;
	string SemEnd;
	string regisStart;
	string regisEnd;
	Course* head = nullptr;
	Course* cur = nullptr;
	Course s;
};

struct StuofCourse
{
	int StuEnroll;//num of Students enrolling to course right now;
	student Stu;
	StuofCourse* next;
};

void InputMyCourse(fstream& f, Course* MyCo, int &n, student Student)
{
	string filename;
	filename = to_string(Student.id) + "_Courses.txt";
	f.open(filename, fstream::in);
	int count = n;
	Course* pcur = MyCo;
	if (f.fail())
	{
		cout << "Can't open Student's Courses file.\n";
		return;
	}
	while (count <= 0)
	{
		if (MyCo == nullptr)
		{
			MyCo = new Course;
			pcur = MyCo;
		}
		else
		{
			pcur->next = new Course;
			pcur = pcur->next;
		}
		f >> pcur->no;
		f >> pcur->CoId;
		f >> pcur->CoName;
		f >> pcur->teacherName;
		f >> pcur->credit;
		f >> pcur->maxSt;
		f >> pcur->day[0];
		f >> pcur->s[0];
		f >> pcur->day[1];
		f >> pcur->s[1];
		pcur->next = nullptr;
		count--;
	}
	f.close();
}

void InputAvailCourse( Sem& S, int& y, Course* MyCo)
{
	fstream f, fSoC;
	f.open("AvailCourse.txt", fstream::in);
	string filename;

	y = 2;
	int t;
	Course* pcur = nullptr;
	f >> y;
	f >> S.year;
	f >> S.regisStart;
	f >> S.regisEnd;
	f >> S.SemStart;
	f >> S.SemEnd;
	f >> t;
	while (t != 0)
	{
		if (S.head == nullptr)
		{
			S.head = new Course;
			pcur = S.head;
		}
		else
		{
			pcur->next = new Course;
			pcur = pcur->next;
		}
		pcur->no = t;	
		f >> pcur->CoId;
		f >> pcur->CoName;
		f >> pcur->teacherName;
		f >> pcur->credit;
		f >> pcur->maxSt;
		f >> pcur->day[0];
		f >> pcur->s[0];
		f >> pcur->day[1];
		f >> pcur->s[1];
		
		filename = pcur->CoId + ".txt";
		fSoC.open(filename, fstream::in);
		pcur->SofC = nullptr;
		f >>  pcur->SofC->StuEnroll;
		StuofCourse *ptmp ;
		while (!fSoC.eof())
		{
			if (pcur->SofC == nullptr)
			{
				pcur->SofC = new StuofCourse;
				ptmp = pcur->SofC;
			}
			else
			{
				ptmp->next = new StuofCourse;
				ptmp = ptmp->next;
			}
			fSoC >> ptmp->Stu.no;
			fSoC >> ptmp->Stu.id;
			fSoC >> ptmp->Stu.firstname;
			fSoC >> ptmp->Stu.lastname ;
			fSoC >> ptmp->Stu.gender;
			fSoC >> ptmp->Stu.dob.day;
			fSoC >> ptmp->Stu.dob.month;
			fSoC >> ptmp->Stu.dob.year;
			fSoC >> ptmp->Stu.socialid;
			ptmp->next=nullptr;
		}
		pcur->next = nullptr;
		f >> t;
		fSoC.close();
	}
	while (MyCo->next != nullptr)
	{
		RemoveAlreadyCourses(S.head, MyCo->no);
		MyCo = MyCo->next;
	}
	f.close();
}

void EnrollCourse(Sem S, Course*& MyCourse, int& count,student Student) // S la hoc ki voi cac course dc staff nhap vao
{
	if (count == 5)
	{
		cout << "You have met the limit of ernrollment course!!!" << endl;
		return;
	}
	string ID;
	bool check;
	if (S.head == nullptr)	return;
	cout << endl << "Please input the Course ID you want to enroll." << endl;
	cout << "ID: ";
	cin >> ID;
	Course* pC = S.head;
	while (pC != nullptr && pC->CoId != ID) pC = pC->next;
	if (MyCourse != nullptr)
	{
		Course* pCheck = MyCourse;
		while (pCheck != nullptr)
		{
			for (int i = 0; i < 2; i++)
				for (int j = 0; j < 2; j++)
					if (pC->day[i] == pCheck->day[j])
						if (pC->s[i] == pCheck->s[j])
						{
							check = false;
							cout << " Enrollment fails. Session is conficted!" << endl;
							return;
						}
		}
	}
	if (pC == nullptr)
	{
		cout << "Wrong ID  !!!";
		return;
	}
	Course* pcur = MyCourse;
	if (MyCourse == nullptr)
	{
		MyCourse = pC;
	}
	else
	{
		while (pcur->next != nullptr) pcur = pcur->next;
		pcur->next = pC;
	}
	if (pC == S.head)
	{
		S.head = S.head->next;
	}
	else
	{
		Course* pLink = S.head;
		while (pLink->next != pC) pLink = pLink->next;
		pLink->next = pC->next;
	}
	pC->next = nullptr;
	AddStutoCourse(pC,Student);
	count++;
}

void AddStutoCourse(Course* MyCo, student Student)
{
	StuofCourse* pCur = MyCo->SofC;
	while (pCur->next != nullptr)	pCur = pCur->next;
	pCur->next = new StuofCourse;
	pCur = pCur->next;
	pCur->StuEnroll++;
	pCur->Stu.id = Student.id;
	pCur->Stu.dob.day = Student.dob.day;
	pCur->Stu.firstname = Student.firstname;
	pCur->Stu.lastname = Student.lastname ;
	pCur->Stu.gender = Student.gender;
	pCur->Stu.dob.month = Student.dob.month;
	pCur->Stu.dob.year = Student.dob.year;
	pCur->Stu.socialid = Student.socialid;
	pCur->Stu.no = Student.no;
}

void ViewAvailableCourse(Sem S, int y)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << S.year  << " in the year of " << y << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << "Registion time is from " << S.regisStart << " to " << S.regisEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	Course* pC = S.head;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoId;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->teacherName;
		cout << setw(5) << pC->credit;
		cout << setw(5) << pC->maxSt;
		cout << setw(15) << pC->day[0];
		cout << setw(15) << pC->s[0];
		cout << endl << setw(89) << pC->day[1];
		cout << endl << setw(15) << pC->s[1];
		pC = pC->next;
	}
}

void RemoveAlreadyCourses(Course*& pHead, int k)
{
	if (pHead == nullptr) return;
	Course* pCur = pHead;
	if (pHead->no == k) {
		pHead = pHead->next;
		delete pCur;
		return;
	}
	while (pCur->next != nullptr) {
		if (pCur->next->no == k) {
			Course* temp = pCur->next;
			pCur->next = pCur->next->next;
			delete temp;
			return;
		}
		pCur = pCur->next;
	}
}

void ViewMyCourse(Sem S, int y, Course* MyCo)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << y << " in the year of " << S.year << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << "Registion time is from " << S.regisStart << " to " << S.regisEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	if (MyCo == nullptr) return;
	Course* pC = MyCo;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoId;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->teacherName;
		cout << setw(5) << pC->credit;
		cout << setw(5) << pC->maxSt;
		cout << setw(15) << pC->day[0];
		cout << setw(15) << pC->s[0];
		cout << endl << setw(89) << pC->day[1];
		cout << endl << setw(15) << pC->s[1];
		pC = pC->next;
	}
}

void DeleteCourse(Sem& S, Course*& MyCo, int& count,student Student)
{
	if (MyCo == nullptr)
	{
		cout << "There are no courses available to delete!!! \n";
		return;
	}
	Course* pC = S.head;
	if (S.head != nullptr) while (pC->next != nullptr) pC = pC->next;
	string ID;
	cout << "Input the Course ID that you want to delete. \n";
	cout << "ID: ";
	cin >> ID;
	Course* pCur = MyCo;
	while (pCur != nullptr && pCur->CoId != ID) pCur = pCur->next;
	RemoveStuofCo(pCur, Student);
	if (S.head == nullptr)
	{
		S.head = pCur;
	}
	else
	{
		Course* pC = S.head;
		while (pC->next != nullptr) pC = pC->next;
		pC->next = pCur;
	}

	if (pCur == MyCo)
	{
		MyCo = MyCo->next;
	}
	else
	{
		Course* pLink = MyCo;
		while (pLink->next != pCur) pLink = pLink->next;
		pLink->next = pC->next;
	}
	pCur->next = nullptr;
	count--;
}

void RemoveStuofCo(Course*& MyCo,student Student)
{
	int x = Student.id;
	StuofCourse* pCur = MyCo->SofC;
	
	if (MyCo->SofC->Stu.id == x) {
		MyCo->SofC = MyCo->SofC->next;
		delete pCur;
		return;
	}

	while (pCur->next != nullptr) {
		if (pCur->next->Stu.id == x) {
			StuofCourse* temp = pCur->next;
			pCur->next = pCur->next->next;
			delete temp;
			return;
		}
		pCur = pCur->next;
	}
	MyCo->SofC->StuEnroll--;
}

void OperateTask(Sem& S, Course*& MyCourse, int& y,int count,student Student)
{
	int option = 1;
	while (option != 4)
	{
		cout << "\n\n";
		cout << "Course: " << endl;
		cout << "\t1. Enroll course.\n";
		cout << "\t2. Delete course.\n";
		cout << "\t3. View list of enrolled courses.\n";
		cout << "\t4. Do nothing. Stop.\n";
		cout << "What do you want to do (1-4 only): ";
		cin >> option;
		if (option != 1 && option != 2 && option != 3 && option != 4) continue;
		switch (option)
		{
		case 1:
		{
			ViewAvailableCourse(S, y);
			EnrollCourse(S, MyCourse,count,Student);
			break;
		}
		case 2:
		{
			ViewMyCourse(S, y, MyCourse);
			DeleteCourse(S, MyCourse,count,Student);
			break;
		}
		case 3:
		{
			ViewMyCourse(S, y, MyCourse);
			break;
		}
		case 4: 
			break;
		}
	}

}

void DeleteList(Course*& MyCo, Sem& S)
{
	while (MyCo != nullptr)
	{
		while (MyCo->SofC != nullptr)
		{
			StuofCourse* pTmp1 = MyCo->SofC;
			MyCo->SofC = MyCo->SofC->next;
			delete pTmp1;
		}
		Course* pTmp = MyCo;
		MyCo = MyCo->next;
		delete pTmp;
	}
	while (S.head != nullptr)
	{
		while (S.head->SofC != nullptr)
		{
			StuofCourse* pTmp1 = S.head->SofC;
			S.head->SofC = S.head->SofC->next;
			delete pTmp1;
		}
		Course* pTmp = S.head;
		S.head = S.head->next;
		delete pTmp;
	}
}

void StoreCoursesofStu(Course* MyCourse, fstream& f, int count, student Student)
{
	string filename;
	filename = to_string(Student.id) + "_Courses.txt";
	f.open(filename, fstream::out);
	if (f.fail())
	{
		cout << "Can't open the Student's Courses file.\n";
		return;
	}
	f << count;
	while (count != 0)
	{
		f << MyCourse->no<<endl;
		f << MyCourse->CoId << endl;
		f << MyCourse->CoName << endl;
		f << MyCourse->teacherName << endl;
		f << MyCourse->credit << endl;
		f << MyCourse->maxSt << endl;
		f << MyCourse->day[0] << endl;
		f << MyCourse->s[0] << endl;
		f << MyCourse->day[1] << endl;
		f << MyCourse->s[1] << endl;
		MyCourse = MyCourse->next;
		count--;
	}
	f.close();
}

void StoreStusofCourse(Course* MyCourse, fstream& f, student Student)
{
	string filename;
	filename = MyCourse->CoId + "_Students.txt";
	f.open(filename, fstream::out);
	if (f.fail())
	{
		cout << "Can't open the Student's Courses file.\n";
		return;
	}
	f << MyCourse->SofC->StuEnroll;
	int count = MyCourse->SofC->StuEnroll;
	StuofCourse* pCur = MyCourse->SofC;
	while (count != 0)
	{
		f << pCur->Stu.id << " ";
		f << pCur->Stu.firstname <<" ";
		f << pCur->Stu.lastname  << " ";
		f << pCur->Stu.gender << " ";
		f << pCur->Stu.dob.day << " ";
		f << pCur->Stu.dob.month << " ";
		f << pCur->Stu.dob.year << " ";
		f << pCur->Stu.socialid << " ";
		count--;
		f << endl;
		pCur = pCur->next;
	}
	f.close();
}

int main()
{
	student Student;
	int count = 0;
	Sem Avail;
	Course* MyCo;
	fstream fin, fstu, fSoC;
	int y;

		InputMyCourse(fstu, MyCo, count, Student);
		InputAvailCourse(Avail, y, MyCo);
		OperateTask(Avail, MyCo, y, count, Student);
		StoreCoursesofStu(MyCo, fstu, count, Student);
		StoreStusofCourse(MyCo, fSoC, Student);
		fin.close();
	DeleteList(MyCo, Avail);

	return 0;
}
