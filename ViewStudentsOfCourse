#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <iomanip>
using namespace std;

struct date
{
	int day;
	int month;
	int year;
};

struct student
{
	int no;
	long int id;
	string firstname;
	string lastname;
	string password;
	string sclass;
	string gender;
	const int type = 0;
	int socialid;
	student* next;
	date dob;
};

struct Course {
	int no;
	string CoId, CoName, teacherName;
	int credit, maxSt = 50;
	string day[2], s[2];
	Course* next;
	StuofCourse* SofC = nullptr;
};

struct Sem {
	int year;
	string SemStart;
	string SemEnd;
	string regisStart;
	string regisEnd;
	Course* head = nullptr;
	Course* cur = nullptr;
	Course s;
};

struct StuofCourse
{
	int StuEnroll;//num of Students enrolling to course right now;
	student Stu;
	StuofCourse* next;
};

void InputAvailCourse(Sem& S, int& y, Course* MyCo)
{
	fstream f, fSoC;
	f.open("AvailCourse.txt", fstream::in);
	string filename;

	y = 2;
	int t;
	Course* pcur = nullptr;
	f >> y;
	f >> S.year;
	f >> S.regisStart;
	f >> S.regisEnd;
	f >> S.SemStart;
	f >> S.SemEnd;
	f >> t;
	while (t != 0)
	{
		if (S.head == nullptr)
		{
			S.head = new Course;
			pcur = S.head;
		}
		else
		{
			pcur->next = new Course;
			pcur = pcur->next;
		}
		pcur->no = t;
		f >> pcur->CoId;
		f >> pcur->CoName;
		f >> pcur->teacherName;
		f >> pcur->credit;
		f >> pcur->maxSt;
		f >> pcur->day[0];
		f >> pcur->s[0];
		f >> pcur->day[1];
		f >> pcur->s[1];

		filename = pcur->CoId + ".txt";
		fSoC.open(filename, fstream::in);
		pcur->SofC = nullptr;
		f >> pcur->SofC->StuEnroll;
		StuofCourse* ptmp;
		while (!fSoC.eof())
		{
			if (pcur->SofC == nullptr)
			{
				pcur->SofC = new StuofCourse;
				ptmp = pcur->SofC;
			}
			else
			{
				ptmp->next = new StuofCourse;
				ptmp = ptmp->next;
			}
			fSoC >> ptmp->Stu.no;
			fSoC >> ptmp->Stu.id;
			fSoC >> ptmp->Stu.firstname;
			fSoC >> ptmp->Stu.lastname;
			fSoC >> ptmp->Stu.gender;
			fSoC >> ptmp->Stu.dob.day;
			fSoC >> ptmp->Stu.dob.month;
			fSoC >> ptmp->Stu.dob.year;
			fSoC >> ptmp->Stu.socialid;
			ptmp->next = nullptr;
		}
		pcur->next = nullptr;
		f >> t;
		fSoC.close();
	}
	f.close();
}

void ViewAvailableCourse(Sem S, int y)
{
	cout << setfill(' ');
	cout << "Course List of Sem " << S.year << " in the year of " << y << " ,which from ";
	cout << S.SemStart << " to " << S.SemEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << "Registion time is from " << S.regisStart << " to " << S.regisEnd << endl;
	cout << "==========================================================================================" << endl;
	cout << setw(5) << "ID";
	cout << setw(15) << "Name";
	cout << setw(15) << "Teacher";
	cout << setw(5) << "Credit";
	cout << setw(5) << "Maximum";
	cout << setw(15) << "Day";
	cout << setw(15) << "Sesson";
	Course* pC = S.head;
	while (pC != nullptr)
	{
		cout << endl;
		cout << setw(5) << pC->CoId;
		cout << setw(15) << pC->CoName;
		cout << setw(15) << pC->teacherName;
		cout << setw(5) << pC->credit;
		cout << setw(5) << pC->maxSt;
		cout << setw(15) << pC->day[0];
		cout << setw(15) << pC->s[0];
		cout << endl << setw(89) << pC->day[1];
		cout << endl << setw(15) << pC->s[1];
		pC = pC->next ;
	}
}

void ViewStudentsofCourse(Sem S)
{
	string x;
	cout << "Enter Course ID: ";
	cin >> x;
	Course* pCur = S.head;
	if (pCur == nullptr)
	{
		cout << "There are no courses available to view students of the courses.\n";
		return;
	}
	while (pCur != nullptr && pCur->CoId != x)
		pCur = pCur->next ;
	if (pCur == nullptr)
	{
		cout << "Wrong Course's ID.\n";
		return;
	}
	int count = 0;
	StuofCourse* pC = S.head->SofC;
	cout << endl << "There are "<< pC->StuEnroll << "students of the course you want to view: \n";
	cout << setw(5) << "No";
	cout << setw(5) << "ID";
	cout << setw(15) << "First Name";
	cout << setw(15) << "Last Name";
	cout << setw(5) << "Gender";
	cout << setw(5) << "Day of Birth";
	while (pC != nullptr)
	{
		cout << setw(5)<<count++;
		cout << setw(5) << pC->Stu.id;
		cout << setw(15) << pC->Stu.firstname;
		cout << setw(15) << pC->Stu.lastname;
		cout << setw(5) << pC->Stu.gender;
		cout << setw(5) << pC->Stu.dob.day<<"/"<<pC->Stu.dob.month<<"/"<<pC->Stu.dob.year<<endl;
		pC = pC->next ;
	}
}

